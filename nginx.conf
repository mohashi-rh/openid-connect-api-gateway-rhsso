## NEED CHANGE (defines the user of the nginx workers)
# user user group;

##Â THIS PARAMETERS BE SAFELY OVER RIDDEN BY YOUR DEFAULT NGINX CONF
worker_processes auto;
env THREESCALE_DEPLOYMENT_ENV;
# error_log stderr notice;
# daemon off;
error_log logs/error.log info;

events {
  worker_connections 256;
}

http {
  lua_shared_dict api_keys 10m;
  server_names_hash_bucket_size 128;
  lua_package_path ";;$prefix/?.lua;$prefix/conf/?.lua";
  init_by_lua_block {
    math.randomseed(ngx.time())
    cjson = require("cjson")
    rhsso = require("rhsso_config")
  }

  resolver 8.8.8.8 8.8.4.4;

  upstream backend_2555417737937 {
    # service name: test-api ;
    server 192.168.100.1:8282 max_fails=5 fail_timeout=30;
  }

  server {
    # Enabling the Lua code cache is strongly encouraged for production use. Here it is enabled by default for testing and development purposes
    lua_code_cache off;
    listen 80 ;
    ## CHANGE YOUR SERVER_NAME TO YOUR CUSTOM DOMAIN OR LEAVE IT BLANK IF ONLY HAVE ONE
    server_name localhost;
    underscores_in_headers on;
    set_by_lua $deployment 'return os.getenv("THREESCALE_DEPLOYMENT_ENV")';
    set $threescale_backend "https://su1.3scale.net:443";

    set $service_token "3fd37edaf3032b75b4f04c0c4aa9f37d8143df63d3542ea06eaf0004a8a036db";
    set $service_id 2555417737937;

    set_by_lua $rhsso_server "return rhsso.server";

    location = /authorize {
      set_by_lua $authorize_url "return rhsso.authorize_url";
      access_by_lua "require('oauth').authorize()";

      proxy_pass $authorize_url$is_args$args;
    }

    location = /oauth/token  {
      set_by_lua $token_url "return rhsso.token_url";
      access_by_lua "require('oauth').get_token()";

      proxy_pass $token_url$is_args$args;
    }

    location = /_threescale/check_credentials {
      internal;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host "su1.3scale.net"; #needed. backend discards other hosts

      proxy_pass $threescale_backend/transactions/oauth_authorize.xml?service_token=$service_token&service_id=$service_id&$args;
    }

    location = /_oauth/token {
      internal;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      more_clear_input_headers Accept-Encoding;

      proxy_redirect    off;
      proxy_max_temp_file_size 0;
      proxy_pass $token_url;
    }

    location = /threescale_oauth_authrep {
      internal;
      proxy_set_header  Host  "su1.3scale.net";
      proxy_set_header  X-3scale-User-Agent "nginx$deployment";
      proxy_set_header  X-3scale-OAuth2-Grant-Type "authorization_code";

      proxy_pass $threescale_backend/transactions/oauth_authrep.xml?service_token=$service_token&service_id=$service_id&$usage&$credentials&log%5Bcode%5D=$arg_code&log%5Brequest%5D=$arg_req&log%5Bresponse%5D=$arg_resp;
    }

    location = /threescale_authrep {
      internal;

      proxy_pass $threescale_backend/transactions/authrep.xml?service_token=$service_token&service_id=$service_id&$usage&$credentials&log%5Bcode%5D=$arg_code&log%5Brequest%5D=$arg_req&log%5Bresponse%5D=$arg_resp;
      proxy_set_header  Host  "su1.3scale.net";
      proxy_set_header  X-3scale-User-Agent "nginx$deployment";
    }

    location = /out_of_band_oauth_authrep_action {
      internal;
      proxy_pass_request_headers off;

      content_by_lua '
        local method, path, headers = ngx.req.get_method(), ngx.var.request_uri, ngx.req.get_headers()

        local req = cjson.encode{method=method, path=path, headers=headers}
        local resp = cjson.encode{ body = ngx.var.resp_body, headers = cjson.decode(ngx.var.resp_headers)}

        local cached_key = ngx.var.cached_key
        if cached_key ~= nil and cached_key ~= "null" then
          local status_code = ngx.var.status
          local res1 = ngx.location.capture("/threescale_oauth_authrep?code=".. status_code .. "&req=" .. ngx.escape_uri(req) .. "&resp=" .. ngx.escape_uri(resp), { share_all_vars = true })
          if res1.status ~= 200 then
            local api_keys = ngx.shared.api_keys
            api_keys:delete(cached_key)
          end
        end

        ngx.exit(ngx.HTTP_OK)
      ';
    }

    location = /register_client {
      internal;

      proxy_pass $registration_url;

      proxy_set_header Content-Type "application/json";
      proxy_set_header Accept "application/json";
      proxy_set_header Authorization "Bearer $access_token";
    }

    # Proxying RH-SSO resources (stylesheets etc.)
    location ~ ^/auth/resources {
      proxy_pass $rhsso_server;
    }
    location ~ ^/favicon.ico {
      proxy_pass $rhsso_server;
    }

    # URL that will listen to the Webhooks
    location ~ ^/webhooks/?$ {
      set $client_id null;
      set $access_token null;
      set $registration_url null;
      access_by_lua "require('webhook_handler').handle()";
      echo;
    }

    location / {
      set $service_token null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
      set $proxy_pass null;
      set $secret_token null;
      set $resp_body null;
      set $resp_headers null;
      set $access_token null;

      proxy_ignore_client_abort on;

      ## CHANGE THE PATH TO POINT TO THE RIGHT FILE ON YOUR FILESYSTEM IF NEEDED
      access_by_lua "require('nginx').access()";

      body_filter_by_lua  'ngx.ctx.buffered = (ngx.ctx.buffered or "") .. string.sub(ngx.arg[1], 1, 1000)
                           if ngx.arg[2] then ngx.var.resp_body = ngx.ctx.buffered end';
      header_filter_by_lua 'ngx.var.resp_headers = cjson.encode(ngx.resp.get_headers())';

      proxy_pass $proxy_pass ;
      proxy_set_header X-Real-IP  $remote_addr;
      proxy_set_header Host echo-api.3scale.net;
      proxy_set_header X-3scale-proxy-secret-token $secret_token;

      post_action /out_of_band_oauth_authrep_action;
    }
  }
}
